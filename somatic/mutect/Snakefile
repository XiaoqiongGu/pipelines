# standard library imports
#
import os
import subprocess
import shutil

# third party imports
#
from snakemake.utils import report

# project specific imports
#
LIB_PATH = os.path.abspath(
    os.path.join(os.path.dirname(os.path.realpath(workflow.snakefile)), "..", "..", "lib"))
if LIB_PATH not in sys.path:
    sys.path.insert(0, LIB_PATH)
from readunits import gen_rg_lib_id, gen_rg_pu_id, fastqs_from_unit, get_sample_for_unit
from utils import chroms_and_lens_from_fasta


RESULT_OUTDIR = 'out'


# non-login bash
shell.executable("/bin/bash")
shell.prefix("source rc/snakemake_env.rc;")

# gatk_mapping needs these
NORMAL_DIR = os.path.join(RESULT_OUTDIR, 'normal')
TUMOR_DIR = os.path.join(RESULT_OUTDIR, 'tumor')
VARIANTS_DIR = os.path.join(RESULT_OUTDIR, 'variants')


include: "../../rules/snpeff.rules"
include: "../../rules/samtools.rules"
include: "../../rules/logging.rules"
include: "../../rules/report.rules"
include: "../../rules/vcf.rules"
include: "../../rules/sambamba.rules"
include: "../../rules/region_clusters.rules"
include: "bwa_mem.rules"
include: "gatk_mapping.rules"


if config['seqtype'] == 'targeted':
    localrules: final, report, gatk_recalibrate_bam gatk_recalibrate_info
else:    
    localrules: final, report


assert sorted(config['samples']) == sorted(["normal", "tumor"])


rule final:
    input:
        os.path.join(VARIANTS_DIR, 'mutect.PASS.snpeff.vcf.gz.tbi'),
        "report.html"


                
rule unit_merge:
    """
    Merge bam files for multiple units into one for the given sample
    (or copy if just one).
    """
    input:
        lambda wildcards: expand("{prefix}/{sample}/unit-{unit}.bwamem.bam",
                                 prefix=wildcards.prefix,
                                 sample=wildcards.sample,
                                 unit=config['samples'][wildcards.sample])
    output:
        temp('{prefix}/{sample}/{sample}.bwamem.bam')
    log:
        '{prefix}/{sample}/{sample}.log'
    message:
        "Merging units to {output}"
    threads:
        4
    run:
        # readgroup and pg now different, so make PG and RG uniq (default)
        if len(input) > 1:
            shell("samtools merge -@ {threads} {output} {input} >& {log};")
        else:
            shell("ln {input} {output} >& {log};")
               

rule mutect_per_region:
    input:
        nbam = os.path.join(NORMAL_DIR, 'normal.bwamem.dedup.realn.recal.bam'),
        nbai = os.path.join(NORMAL_DIR, 'normal.bwamem.dedup.realn.recal.bam.bai'),
        tbam = os.path.join(TUMOR_DIR, 'tumor.bwamem.dedup.realn.recal.bam'),
        tbai = os.path.join(TUMOR_DIR, 'tumor.bwamem.dedup.realn.recal.bam.bai'),
        # FIXME bed = os.path.join(RESULT_OUTDIR, "interval_wo_excl.bed"),
        reffa = config['references']['genome'],
        refidx = config['references']['genome'] + ".fai",
        dbsnp = config['references']['dbsnp'],
        cosmic = config['references']['cosmic'],
        bed = BED_FOR_REGION_TEMPLATE,
    output:
        vcf = temp("{prefix}/mutect.{ctr}.vcf"),
        vcfidx = temp("{prefix}/mutect.{ctr}.vcf.idx"),# just listed to get them removed
        out = temp("{prefix}/mutect.{ctr}.txt"),
        cov = temp("{prefix}/mutect.{ctr}.wig")
    log:
        "{prefix}/mutect.{ctr}.log"
    message:
        "Calling somatic variants with MuTect"
    params:
        frac_cont_arg = "--fraction_contamination {}".format(config["frac_cont"]) if config.get("frac_cont") else ""
    # previously set higher to work around UGE/Java/OS vmem problem in GIS
    threads:
        1
    shell:
        # https://www.broadinstitute.org/cancer/cga/mutect_run
        #  --enable_extended_output
        'MUTECT_THREADS={threads} MUTECT_MEM=8g mutect_wrapper'
        ' --reference_sequence {input.reffa}'
        ' -I:normal {input.nbam} -I:tumor {input.tbam}'
        ' {params.frac_cont_arg}'
        ' --dbsnp {input.dbsnp} --cosmic {input.cosmic}'
        ' --intervals {input.bed}'
        ' --coverage_file {output.cov}'
        ' --out {output.out} --vcf {output.vcf}'
        ' >& {log}'

localrules: mutect_combine
rule mutect_combine:
    input:
        vcf = expand("{{prefix}}/mutect.{ctr}.vcf", ctr=range(len(config["references"]["region_clusters"]))),
        out = expand("{{prefix}}/mutect.{ctr}.txt", ctr=range(len(config["references"]["region_clusters"]))),
        cov = expand("{{prefix}}/mutect.{ctr}.wig", ctr=range(len(config["references"]["region_clusters"]))),
    output:
        vcf = temp("{prefix}/mutect.vcf"),
        out = "{prefix}/mutect.txt.gz",
        cov = "{prefix}/mutect.wig.gz",
    log:
        os.path.join(VARIANTS_DIR, "mutect_combine.log")
    message:
        "Combining results"
    threads:
        1
    shell:
        # combine and gzip files. remove most header from vcf's except first
        "{{ cat {input.out} | gzip > {output.out}; "
        " cat {input.cov} | gzip > {output.cov}; "
        " grep '^#' {input.vcf[0]} > {output.vcf}; "
        " grep -h -v '^#' {input.vcf} >> {output.vcf}; }} >& {log}"   

    
localrules: mutect_pass
rule mutect_pass:
    input:
        "{prefix}.vcf.gz"
    output:
        "{prefix}.PASS.vcf.gz",
    log:
         "{prefix}.PASS.log",
    message:
        "Extracting only passed variants"
    threads:
        1
    shell:
        "bcftools view -O z -o {output} -f PASS {input} >& {log}"   

