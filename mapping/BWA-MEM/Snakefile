# standard library imports
#
import os

# third party imports
#
from snakemake.utils import report

# project specific imports
# /


LIB_PATH = os.path.abspath(
    os.path.join(os.path.dirname(os.path.realpath(workflow.snakefile)), "..", "..", "lib"))
if LIB_PATH not in sys.path:
    sys.path.insert(0, LIB_PATH)

    
RESULT_OUTDIR = './out'


# non-login bash
shell.executable("/bin/bash")
shell.prefix("source rc/snakemake_env.rc;")


include: "../../rules/logging.rules"
include: "../../rules/samtools.rules"
include: "bwa_mem.rules"

                    
localrules: final, report


rule final:
    input:
        # NOTE changes here will likely have to be reflected in the report rule as well
        idxstats=expand(os.path.join(RESULT_OUTDIR, '{sample}/{sample}.bwamem.idxstats.txt'),
               sample=config['samples']),
        bams=expand(os.path.join(RESULT_OUTDIR, '{sample}/{sample}.bwamem.bam'),
               sample=config['samples']),
        bamstats=expand(os.path.join(RESULT_OUTDIR, '{sample}/{sample}.bwamem.bamstats/stats_plot.html'),
               sample=config['samples']),
        report="report.html"
    message:
        """
        Pipeline run successfully completed
        """
    # Set no output in final rule. Otherwise deletion of any input will not result in a rerun

        
rule report:
    input:
        bams = expand(os.path.join(RESULT_OUTDIR, '{sample}/{sample}.bwamem.bam'),
                      sample=config['samples']),
        bamstats = expand(os.path.join(RESULT_OUTDIR, '{sample}/{sample}.bwamem.bamstats/stats_plot.html'),
                          sample=config['samples']),
    output:
        html="report.html"
    params:
        samplenames=', '.join(config['samples'].keys())
    run:
        workflow_home = os.path.dirname(os.path.realpath(workflow.snakefile))
        readme = "EMPTY"
        with open(os.path.join(workflow_home, "README.rst")) as fh:
            readme = fh.read()
            
        report("""
=================================================================
Pipeline {config[ELM][pipeline_name]} run on {params.samplenames}
=================================================================

Version Info
------------

{config[ELM][pipeline_version]}

""" + readme, output.html, metadata="Research Pipeline Development Team (rpd@gis.a-star.edu.sg)",# **input)
               conf="conf.yaml")
        # from doc "All keywords not listed below are intepreted as paths to files that shall be embedded into the document."
        # **input just attaches all input, but None is not allowed.
        # Attaching configfile is more a crutch to have at least something
