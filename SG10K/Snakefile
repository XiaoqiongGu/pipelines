import os

from snakemake.utils import report
from elmlogger import ElmLogging, UnitId, timestamp
from SG10K import getuser


RESULT_OUTDIR = './out'


# FIXME to conf once downstream handling clear
MARK_SHORT_SPLITS="-M"# "-M" or ""


# non-login bash
shell.executable("/bin/bash")
shell.prefix("source snakemake_env.rc;")


include: "rules/samtools.rules"
#include: "rules/bwa.rules"
#include: "rules/bedtools.rules"


onstart:# available as patched snakemake 3.5.5
    global elm_logger

    if config['ELM']['run_id'] or config['ELM']['library_id'] or config['ELM']['lane_id']:
        unit_ids = [UnitId._make(x) for x in zip(
            config['ELM']['run_id'], config['ELM']['library_id'], config['ELM']['lane_id'])]
    else:
        unit_ids = [UnitId._make(['NA', 'NA', 'NA'])]
        
    elm_logger = ElmLogging(workflow.snakefile,
                            config['ELM']['pipeline_name'],
                            config['ELM']['pipeline_version'],
                            getuser(),#SET_ON_EXEC
                            config['ELM']['site'],
                            timestamp(),# crutch: master jid would be best, but site dependent. log location unknown. how to treat manual runs?
                            config['ELM']['log_path'],#SET_ON_EXEC
                            RESULT_OUTDIR,
                            unit_ids)
    elm_logger.start()
onsuccess:
    elm_logger.stop(True)
onerror:
    elm_logger.stop(False)

    
rule final:
  input:
        os.path.join(RESULT_OUTDIR, config['sample'] + '.bwamem.fixmate.mdups.srt.merged.recal.idxstats.txt'),
        os.path.join(RESULT_OUTDIR, config['sample'] + '.bwamem.fixmate.mdups.srt.merged.recal.maprate.txt'),
        expand(os.path.join(RESULT_OUTDIR, config['sample'] + '.bwamem.fixmate.mdups.srt.merged.recal.{race}.selfSM'), race=config['references']['cont_vcfs']),
        os.path.join(RESULT_OUTDIR, config['sample'] + '.bwamem.fixmate.mdups.srt.merged.recal.bam'),
        os.path.join(RESULT_OUTDIR, config['sample'] + '.bwamem.fixmate.mdups.srt.merged.recal.bamstats/stats_plot.html')
  message:
        """
        Pipeline run successfully completed
        
        FIXME:tests missing
        FIXME:report missing
        """
  # if output is created here, deleting the 'input' will not result in
  # rerun so it's best to not create any fake output files here
  #output:  'COMPLETE'
  #shell:   'touch {output}'


rule contamination_check:
    input:
        bam = os.path.join(RESULT_OUTDIR, '{sample}.bam'),
        bai = os.path.join(RESULT_OUTDIR, '{sample}.bam.bai'),
        #vcf = lambda wildcards: config["references"]["cont_vcfs"][wildcards.race]
        #vcf = lambda wildcards: config["references"]["cont_vcfs"][wildcards.race]
        vcf = lambda wildcards: config["references"]["cont_vcfs"][wildcards.race]
    output:
        # assuming default option --self
        bam = os.path.join(RESULT_OUTDIR, '{sample}.{race}.selfSM')
    params:
        outbase = os.path.join(RESULT_OUTDIR, '{sample}.{race}')
    message:
        "Checking for contamination"
    benchmark:# should have same name as rule
        'benchmark/contamination_check.txt'
    shell:
        # NOTE: defaults tuned for shallow WGS
        # See http://genome.sph.umich.edu/wiki/VerifyBamID#What_the_default_option_does
        # run for sample and read-groups, i.e. don't use --ignoreRG
        "verifyBamID --vcf {input.vcf} --bam {input.bam} --out {params.outbase} --noPhoneHome;"

        
rule bq_recal:
    """Use bamutils for base quality recalibration with bamUtils

    recommended use without deduper: http://genome.sph.umich.edu/wiki/BamUtil:_recab

    Bottleneck because single thread process! See https://github.com/statgen/bamUtil/issues/21
    """
    input:
        bam = os.path.join(RESULT_OUTDIR, '{sample}.bam'),
        reffa = config['references']['genome'],
        dbsnp = config['references']['dbsnp']
    output:
        bam = os.path.join(RESULT_OUTDIR, '{sample}.recal.bam'),
        qemp = os.path.join(RESULT_OUTDIR, '{sample}.recal.bam.qemp')
    message:
        "Base quality recalibration with bamUtils"
    benchmark:# should have same name as rule
        'benchmark/bq_recal.txt'
    shell:
        # recommended use is --storeQualTag OQ but we need the BAMs to be small
        "bam recab --in {input.bam} --out {output.bam} --refFile {input.reffa} --dbsnp {input.dbsnp} --maxBaseQual 40 --noPhoneHome"
    
    
rule sample_merge:
    """
    Merge bam files for multiple units into one for the given sample.
    If the sample has only one unit, a symlink will be created.
    """
    input:
        expand(os.path.join(RESULT_OUTDIR, '{unit}.bwamem.fixmate.mdups.srt.bam'), unit=config["units"])
    threads:
        16
    output:
        temp(os.path.join(RESULT_OUTDIR, config['sample'] + '.bwamem.fixmate.mdups.srt.merged.bam'))
    message:
        "Merging files"
    benchmark:# should have same name as rule
        'benchmark/sample_merge.txt'
    run:
        if len(input) > 1:
            shell("samtools merge -@ {threads} {output} {input};")
        else:
            shell("ln -s {input} {output} && touch -h {output}")


def gen_lib_id(unit):
    if unit['library_id']:
        return unit['library_id']
    else:
        return "dummy-" + unit['rg_id']

    
def gen_rg_pu_id(unit):
    """https://www.biostars.org/p/50349/"""
    if unit['run_id'] and unit['lane_id']:
        return "{}.{}".format(unit['run_id'], unit['lane_id'])
    else:
        return "dummy-" + unit['rg_id']

def fastqs_fo_unit(unit):
    """FIXME:add-doc
    """
    return unit['fq1'], unit['fq2']


# Expecting SE/PE input read length >70 (BWA-MEM limitation)
rule map_mdups_sort:
    """fixmate only works on name sorted files. ignores secondary 
    alignments, i.e. safe to use with bwa mem -M:
    http://sourceforge.net/p/samtools/mailman/message/30556922/
         
    samtools sort might need control of max thread memory to not go 
    over limit for v1.3 it's 768M. if we use 16 threads this amounts 
    to max 12.3GB (on top of whatever else is running).
	
    using samtools instead of sambamba for view and sort:
    http://genomespot.blogspot.sg/2015/03/sambamba-vs-samtools.html says
    runtime difference are not too huge and samtools is the conservative
    choice anyway

    Define temporary sorting out prefix to avoid nameclashes (default
    -.XXX.bam for stdin)

    Setting read groups correctly is tricky and also depends on
    downstream programs. See
    e.g. http://gatkforums.broadinstitute.org/gatk/discussion/6472/read-groups
    For example for BQSR PU takes precedence over ID. PU should contain lane
    """
    input:
        reffa = config['references']['genome'],
        reffai = config['references']['genome'] + ".pac",
        fastqs = lambda wildcards: fastqs_fo_unit(config["units"][wildcards.unit])
    output:
        bam=temp(os.path.join(RESULT_OUTDIR, '{unit}.bwamem.fixmate.mdups.srt.bam'))
    params:
        mark_short_splits=MARK_SHORT_SPLITS,
        bwa_mem_custom_args=config.get("bwa_mem_custom_args", ""),
        sort_mem='500M',
        rg_id=lambda wildcards: config["units"][wildcards.unit]['rg_id'],# always set
        lib_id=lambda wildcards: gen_lib_id(config["units"][wildcards.unit]),
        pu_id=lambda wildcards: gen_rg_pu_id(config["units"][wildcards.unit])
    message:
        'Aligning PE reads, fixing mate information, marking duplicates and converting to sorted BAM'
    threads:
        16
    benchmark:# should have same name as rule
        'benchmark/map_mdups_sort.txt'
    shell:
        "bwa mem {params.mark_short_splits} -t {threads}"
        " -R '@RG\tID:{params.rg_id}\tPL:{config[platform]}\tPU:{params.pu_id}\tLB:{params.lib_id}\tSM:{config[sample]}\tCN:GIS'"
        " {params.bwa_mem_custom_args} {input.reffa} {input.fastqs} |"
        " samtools fixmate -O sam - - |"
        " samblaster {params.mark_short_splits} |"
        " samtools view -@ {threads} -bu -o - |"
        " samtools sort -@ {threads} -m {params.sort_mem} -o {output.bam} -T {output.bam}.tmp -"

# FIXME rule report:
# write program versions
# how it works
