# standard library imports
#
import os

# third party imports
#
from snakemake.utils import report

# project specific imports
#
LIB_PATH = os.path.abspath(
    os.path.join(os.path.dirname(os.path.realpath(workflow.snakefile)), "..", "..", "lib"))
if LIB_PATH not in sys.path:
    sys.path.insert(0, LIB_PATH)
from readunits import gen_rg_lib_id, gen_rg_pu_id, fastqs_from_unit, get_sample_for_unit


RESULT_OUTDIR = 'out'


# FIXME to conf once downstream handling clear
MARK_SHORT_SPLITS="-M"# "-M" or ""

# read group functions following
# http://gatkforums.broadinstitute.org/gatk/discussion/6472/read-groups


# non-login bash
shell.executable("/bin/bash")
shell.prefix("source rc/snakemake_env.rc;")


include: "../../rules/logging.rules"
include: "../../rules/samtools.rules"
include: "../../rules/report.rules"


localrules: final, report


rule final:
    input:
        # NOTE changes here will likely have to be reflected in the report rule as well
        expand(os.path.join(RESULT_OUTDIR, '{sample}/{sample}.bwamem.fixmate.mdups.srt.recal.idxstats.txt'),
               sample=config['samples']),
        expand(os.path.join(RESULT_OUTDIR, '{sample}/{sample}.bwamem.fixmate.mdups.srt.recal.maprate.txt'),
               sample=config['samples']),
        expand(os.path.join(RESULT_OUTDIR, '{sample}/{sample}.bwamem.fixmate.mdups.srt.recal.{race}.selfSM'),
               race=config['references']['cont_vcfs'], sample=config['samples']),
        expand(os.path.join(RESULT_OUTDIR, '{sample}/{sample}.bwamem.fixmate.mdups.srt.recal.bam'),
               sample=config['samples']),
        expand(os.path.join(RESULT_OUTDIR, '{sample}/{sample}.bwamem.fixmate.mdups.srt.recal.bamstats/stats_plot.html'),
               sample=config['samples']),
        expand(os.path.join(RESULT_OUTDIR, '{sample}/{sample}.bwamem.fixmate.mdups.srt.recal.qc-062017.txt'),
               sample=config['samples']),
        "report.html"
    message:
        """
        Pipeline run successfully completed
        """
    # Set no output in final rule. Otherwise deletion of any input will not result in a rerun


rule sample_qc:
    input:
        bam = '{prefix}.bam'
    output:
        qc = '{prefix}.qc-062017.txt'
    log:
        '{prefix}.qc-062017.log'
    message:
        'Running sample QC'
    shell:
        # FIXME name should not contain version
        "{{ sg10k-cov-062017.sh {input.bam} > {output.qc}; }} >& {log}"


rule sample_qc_pre_060217:
    input:
        bam = '{prefix}.bam'
    output:
        qc = '{prefix}.qc.txt'
    log:
        '{prefix}.qc.log'
    message:
        'Running sample QC'
    params:
        minbq = 20
    shell:
        "{{ n=$(samtools view -h -f 0x2 {input.bam} | samtools depth -q {params.minbq} - | datamash sum 3);"
        "echo \"Number of bases (in properly aligned reads with minbq {params.minbq}): $n\" > {output.qc};"
        " }} >& {log}"


rule bam_to_cram:
    input:
        bam = '{prefix}.bam',
	reffa =	config['references']['genome']
    output:
        cram = '{prefix}.qbinned.cram'
    message:
        "Converting {input.bam}"
    log:
        "{prefix}.cram.log"
    params:
        bin_arg="--binCustom --binQualS 0:2,3:3,4:4,5:5,6:6,7:10,13:20,23:30"
       # see chaolong's email from 2016-11-22
    threads:
        2
    #conda:
    #    "env.yaml"
    shell:
        # FIXME might break others
        # BAMUTILS = '/home/users/astar/gis/gisshared/rpd/apps.testing/bamUtil-1.0.14-33-gba44ffc-NonPrimaryDedup/bin/bam'
        "{BAMUTILS_CUSTOM_BINNING} squeeze --in {input.bam} --out -.ubam {params.bin_arg} |"
        "samtools view -C -T {input.reffa} -@ {threads} -o {output.cram} - >& {log}"
        
        
rule contamination_check:
    input:
        bam = os.path.join(RESULT_OUTDIR, '{prefix}.bam'),
        bai = os.path.join(RESULT_OUTDIR, '{prefix}.bam.bai'),
        vcf = lambda wildcards: config["references"]["cont_vcfs"][wildcards.race]
    output:
        # assuming default option --self
        bam = os.path.join(RESULT_OUTDIR, '{prefix}.{race}.selfSM')
    log:
        os.path.join(RESULT_OUTDIR, '{prefix}.{race}.recal.cont.log')
    params:
        outbase = os.path.join(RESULT_OUTDIR, '{prefix}.{race}'),
        maxdepth = 100,
        minmapq = 20,
        minq = 20,
        maxq = 100
    message:
        "Checking for contamination"
    shell:
        # NOTE: defaults tuned for shallow WGS
        # See http://genome.sph.umich.edu/wiki/VerifyBamID#What_the_default_option_does
        # Chaolong wanted specials settings (see email from 2016-02-22)
        # run for sample and read-groups, i.e. don't use --ignoreRG
        "verifyBamID --vcf {input.vcf} --bam {input.bam} --out {params.outbase}"
        " --noPhoneHome --precise --maxDepth {params.maxdepth} --minMapQ {params.minmapq}"
        " --minQ {params.minq} --maxQ {params.maxq} >& {log};"

        
rule bq_recal:
    """Use bamutils for base quality recalibration with bamUtils

    recommended use without deduper: http://genome.sph.umich.edu/wiki/BamUtil:_recab

    Bottleneck because single thread process! See https://github.com/statgen/bamUtil/issues/21
    """
    input:
        bam = '{prefix}.bam',
        reffa = config['references']['genome'],
        dbsnp = config['references']['dbsnp']
    output:
        bam = '{prefix}.recal.bam',
        qemp = '{prefix}.recal.bam.qemp'
    log:
        '{prefix}.recal.log',
    message:
        "Base quality recalibration with bamUtils"
    shell:
        # recommended use is --storeQualTag OQ but we need the BAMs to be small
        "bam recab --in {input.bam} --out {output.bam} --refFile {input.reffa}"
        " --dbsnp {input.dbsnp} --maxBaseQual 40 --noPhoneHome >& {log}"
    
    
rule unit_merge:
    """
    Merge bam files for multiple units into one for the given sample.
    If the sample has only one unit, a symlink will be created.
    """
    input:
        lambda wildcards: expand(
            '{prefix}/unit-{unit}.bwamem.fixmate.mdups.srt.bam', 
            prefix=wildcards.prefix, unit=config['samples'][wildcards.sample])
    output:
        temp('{prefix}/{sample}/{sample}.bwamem.fixmate.mdups.srt.bam')
    log:
        '{prefix}/{sample}/{sample}.bwamem.fixmate.mdups.srt.bam.log'
    message:
        "Merging files"
    threads:
        4
    run:
        if len(input) > 1:
            shell("samtools merge -@ {threads} {output} {input} >& {log};")
        else:
            # hard link should work even if input is temp and later deleted
            shell("ln {input} {output} >& {log};")


# Expecting SE/PE input read length >70 (BWA-MEM limitation)
rule map_mdups_sort:
    """fixmate only works on name sorted files. ignores secondary 
    alignments, i.e. safe to use with bwa mem -M:
    http://sourceforge.net/p/samtools/mailman/message/30556922/
         
    samtools sort might need control of max thread memory to not go 
    over limit for v1.3 it's 768M. if we use 16 threads this amounts 
    to max 12.3GB (on top of whatever else is running).
	
    using samtools instead of sambamba for view and sort:
    http://genomespot.blogspot.sg/2015/03/sambamba-vs-samtools.html says
    runtime difference are not too huge and samtools is the conservative
    choice anyway

    Define temporary sorting out prefix to avoid nameclashes (default
    -.XXX.bam for stdin)

    Setting read groups correctly is tricky and also depends on
    downstream programs. See
    e.g. http://gatkforums.broadinstitute.org/gatk/discussion/6472/read-groups
    For example for BQSR PU takes precedence over ID. PU should contain lane

    We don't mark duplicate again after merging because it's a PCR
    free library to optical duplicates matter the most
    """
    input:
        reffa = config['references']['genome'],
        reffai = config['references']['genome'] + ".pac",# incomplete but should do
        fastqs=lambda wildcards: fastqs_from_unit(config["readunits"][wildcards.unit])
    output:
        bam=temp('{prefix}/unit-{unit}.bwamem.fixmate.mdups.srt.bam')
    log:
        '{prefix}/unit-{unit}.bwamem.fixmate.mdups.srt.bam.log'
    message:
        'Aligning PE reads, fixing mate information, marking duplicates and converting to sorted BAM'
    params:
        mark_short_splits=MARK_SHORT_SPLITS,
        bwa_mem_custom_args=config.get("bwa_mem_custom_args", ""),
        sort_mem='500M',
        rg_id=lambda wildcards: config["readunits"][wildcards.unit]['rg_id'],# always set
        lib_id=lambda wildcards: gen_rg_lib_id(config["readunits"][wildcards.unit]),
        pu_id=lambda wildcards: gen_rg_pu_id(config["readunits"][wildcards.unit]),
        sample=lambda wildcards: get_sample_for_unit(wildcards.unit, config)
    threads:
        8
    shell:
        "{{ bwa mem {params.mark_short_splits} -t {threads}"
        " -R '@RG\\tID:{params.rg_id}\\tPL:{config[platform]}\\tPU:{params.pu_id}\\tLB:{params.lib_id}\\tSM:{params.sample}\\tCN:GIS'"
        " {params.bwa_mem_custom_args} {input.reffa} {input.fastqs} |"
        " samtools fixmate -O sam - - |"
        " samblaster {params.mark_short_splits} |"
        " samtools view -@ {threads} -bu -o - |"
        " samtools sort -@ {threads} -m {params.sort_mem} -o {output.bam} -T {output.bam}.tmp -; }} >& {log}"
