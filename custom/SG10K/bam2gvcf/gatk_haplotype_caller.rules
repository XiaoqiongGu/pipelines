"""
Based on rules/variant_calling/gatk_haplotype_caller.rules from https://bitbucket.org/johanneskoester/snakemake-workflows/ (commit fa47806)
- original author Johannes KÃ¶ster (http://johanneskoester.bitbucket.org)
- original license: MIT
"""


# NOTE: needs to match settings used to produce BAM file
assert 'references' in config
assert 'genome' in config["references"]
assert 'num_chroms' in config["references"]

    
def _gatk_multi_arg(flag, files):
    flag += " "
    return " ".join(flag + f for f in files)


rule gatk_haplotype_caller:
    input:
        bams = [os.path.join(config['precalc_bam_dir'], "{sample}/", '{sample}.bwamem.fixmate.mdups.srt.recal.bam')],
        bais = [os.path.join(config['precalc_bam_dir'], "{sample}/", '{sample}.bwamem.fixmate.mdups.srt.recal.bam.bai')],
        ref = config["references"]["genome"],
        # see prep_bed_files
        # split by chrom and intersect with intervals already if needed
        bed=os.path.join(RESULT_OUTDIR, "chr.split.{ctr}.bed")
    output:
        gvcf = temp("{prefix}/{sample}.{ctr}.g.vcf"),
        idx = temp("{prefix}/{sample}.{ctr}.g.vcf.idx")
    log:
        "{prefix}/{sample}.{ctr}.g.vcf.log"
    params:
        custom = config.get("params_gatk", ""),
        #padding_arg = _get_padding_arg(),
        padding_arg = "",
        het_arg = "--heterozygosity {config[heterozygosity]}" if config.get('heterozygosity') else "",
        het_indel_arg = "--indel_heterozygosity {config[indel_heterozygosity]}" if config.get('indel_heterozygosity') else ""
    threads:
        # original comment: "haplotype caller currently does not reliably
        # use more than 2 threads".  we found it to not work reliably with
        # anything >1.
        # previously set higher to work around UGE/Java/OS vmem problem in GIS
        1
    run:
        bams = _gatk_multi_arg("-I", input.bams)
        # no need to call if bed is empty
        num_regs = 0
        with open(input.bed) as fh:
            for line in fh:
                if len(line.strip()):
                    num_regs += 1
        if num_regs:
            shell(
                "GATK_THREADS={threads} GATK_MEM=16g gatk_wrapper"
                " -T HaplotypeCaller -R {input.ref} {bams}"
                " -L {input.bed} {params.padding_arg} {params.custom} {params.het_arg} {params.het_indel_arg}"
                " --emitRefConfidence GVCF"
                " --dbsnp {config[references][dbsnp]}"#-nct {threads} "
                " -o {output.gvcf} >& {log}")
        else:
            # if empty just touch. idx no needed and gvcf later simply concatenated
            shell("touch {output.gvcf} {output.idx} >& {log}; echo 'Touching only' >> {log}")


ruleorder: gatk_catvariants > gatk_haplotype_caller
rule gatk_catvariants:
    input:
        # With the following things would normally fail with
        #   "gatk_haplotype_caller and gatk_catvariants are ambiguous for the file ./out/NA12878-targeted.concat.gvcf"
        split_gvcfs = expand("{{prefix}}/{{sample}}.{ctr}.g.vcf",
                             ctr=range(config["references"]["num_chroms"]))
        # hence use rule dep (alternative rule order): ruleorder: gatk_haplotype_caller > gatk_catvariants
        # With the following rule dep as replacement, things still fail with
        #   "Wildcards in input, params, log or benchmark file of rule gatk_catvariants cannot be determined from output files: 'prefix'"
        # split_gvcfs = rules.gatk_haplotype_caller.output.gvcf
        # Hence we use the first with a ruleorder (see above)
        # concat needed to avoid snakemake recurions problems
    output:
        cat_gvcf="{prefix}/{sample}.concat.g.vcf",
        #cat_idx="variant_calling/{reference}/{sample}.gvcf.idx"
    log:
        "{prefix}/{sample}.concat.g.vcf.log"
    run:
        #vcf_in_args = " -V ".join(input.split_gvcfs)
        #shell("GATK_THREADS={threads} GATK_MEM=16g gatk_wrapper -T CombineVariants -R {input.ref} -V {vcf_in_args} -o {output.cat_gvcf} --assumeIdenticalSamples")
        # CombineVariants takes forever https://www.broadinstitute.org/gatk/guide/tooldocs/org_broadinstitute_gatk_tools_walkers_variantutils_CombineVariants.php
        #shell("cat {} > {}; grep -v '^#' {} >> {}".format(input.split_gvcfs[0],
        #   output.cat_gvcf, ' '.join(input.split_gvcfs[1:])), output.cat_gvcf)
        # simple cat which keeps hashes seems to work as well
        #shutil.copy(input.split_gvcfs[0], output.cat_gvcf)
        #for f in input.split_gvcfs[1:]:
        #    shell("sed -e  '/^#/d' {} >> {} 2>{{log}}".format(f, output.cat_gvcf))
        header_printed = False
        with open(output.cat_gvcf, 'w') as fhout:
            for f in input.split_gvcfs:
                with open(f) as fhin:
                    had_header = False
                    for line in fhin:
                        if line.startswith('#'):
                            if not header_printed:
                                had_header = True
                                fhout.write(line)
                        else:
                            fhout.write(line)
                    if had_header:
                        header_printed = True

