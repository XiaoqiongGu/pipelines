# standard library imports
#
import os
import subprocess
import shutil
from itertools import chain

# third party imports
#
from snakemake.utils import report

#####
# project specific imports
#
LIB_PATH = os.path.abspath(
    os.path.join(os.path.dirname(os.path.realpath(workflow.snakefile)), "..", "lib"))
if LIB_PATH not in sys.path:
    sys.path.insert(0, LIB_PATH)
from readunits import gen_rg_lib_id, gen_rg_pu_id, fastqs_from_unit, get_sample_for_unit


RESULT_OUTDIR = './out'
SAMPLE_MERGE_OUTDIR = os.path.join(RESULT_OUTDIR, 'merged')
FDEMUX_OUTDIR = os.path.join(RESULT_OUTDIR, 'fdemux')

# non-login bash
shell.executable("/bin/bash")
shell.prefix("source rc/snakemake_env.rc;")


assert len(config['samples'])==1
# include: "../rules/logging.rules"
include: "../rules/samtools.rules"

GENOME_BASENAME = os.path.splitext(os.path.basename(config['references']['genome']))[0]
    

rule final:
    input:
        expand('{dir}/{sample}_ROW{row}/star/{sample}_ROW{row}_{genome}_Aligned.sortedByCoord.out.bam',
               dir=RESULT_OUTDIR,
               genome=GENOME_BASENAME,
               sample=config['samples'], 
               row=["{:02d}".format(x) for x in range(1, 41)]),
        expand('{dir}/{sample}_ROW{row}/rnaseqQC/{sample}_ROW{row}_{genome}_RNASeqQC_complete.OK',
               dir=RESULT_OUTDIR,
               genome=GENOME_BASENAME,
               sample=config['samples'], 
               row=["{:02d}".format(x) for x in range(1, 41)]),
        expand('{dir}/{sample}_ROW{row}/rsem/{sample}_ROW{row}_{genome}_RSEM.genes.results',
               dir=RESULT_OUTDIR,
               genome=GENOME_BASENAME,
               sample=config['samples'], 
               row=["{:02d}".format(x) for x in range(1, 41)]),
        expand('{dir}/{sample}_ROW{row}/cuffdiff/{sample}_ROW{row}_{genome}_genes_FPKM_Rawreadcount_GIS.txt',
               dir=RESULT_OUTDIR,
               genome=GENOME_BASENAME,
               sample=config['samples'], 
               row=["{:02d}".format(x) for x in range(1, 41)]),
        expand('{dir}/{sample}_ROW{row}/dexseq/{sample}_ROW{row}_{genome}_dexseq_exoncount.txt',
               dir=RESULT_OUTDIR,
               genome=GENOME_BASENAME,
               sample=config['samples'], 
               row=["{:02d}".format(x) for x in range(1, 41)]),
        report="report.html"


rule report:
    input:
        "Snakefile"# FIXME FAKE!
    output:
        html="report.html"
    params:
        samplenames=', '.join(config['samples'].keys())
    run:
        workflow_home = os.path.dirname(os.path.realpath(workflow.snakefile))
        readme = "EMPTY"
        with open(os.path.join(workflow_home, "README.md")) as fh:
            readme = fh.read()
            
        report("""
=================================================================
Pipeline {config[ELM][pipeline_name]} run on {params.samplenames}
=================================================================

Version Info
------------

{config[ELM][pipeline_version]}) 

""" + readme, output.html, metadata="Research Pipeline Development Team (rpd@mailman.gis.a-star.edu.sg)",# **input)
               conf="conf.yaml")
        # from doc "All keywords not listed below are intepreted as paths to files that shall be embedded into the document."
        # **input just attaches all input, but None is not allowed.
        # Attaching configfile is more a crutch to have at least something

rule DEXSeq:
    input:
        bam = expand("{dir}/{{sample}}_ROW{{row}}/star/{{sample}}_ROW{{row}}_{genome}_Aligned.sortedByCoord.out.bam",
            dir=RESULT_OUTDIR,
            genome=GENOME_BASENAME),
        gff = config['references']['dexseqgff'],
    output:
        "{dir}/{sample}_ROW{row}_{genome}_dexseq_exoncount.txt"
    message: "Running DEXSeq"    
    run:
        shell("""export PATH=$PATH:/mnt/software/bin;
            /mnt/software/bin/python2.7 /home/userrig/pipelines_tools/DEXSeq/inst/python_scripts/dexseq_count.py -f bam -s no -r pos {input.gff} {input.bam} {output};""")

rule cuffdiff:
    input:
        bam = expand("{dir}/{{sample}}_ROW{{row}}/star/{{sample}}_ROW{{row}}_{genome}_Aligned.sortedByCoord.out.bam",
            dir=RESULT_OUTDIR,
            genome=GENOME_BASENAME),
        gtf = config['references']['gtfsourcefile'],
        gtfmask = config['references']['gtfmaskfile'],
        ref = config['references']['genome']
    output:
        matrix = "{dir}/{sample}_ROW{row}_{genome}_genes_FPKM_Rawreadcount_GIS.txt",
        #fpkm = "{dir}/{sample}_ROW{row}_{genome}_cuffdiffcomplete.OK"
    message: "Running cuffdiff"
    params:
        biascorr = "--frag-bias-correct",
        mask = "--mask-file"
    log:
        "{dir}/{sample}_ROW{row}_{genome}_cufflinks.log"
    threads: 18    
    #run:
    shell:
        " outprefix=`dirname {output.matrix}`; "
        " cuffdiff --quiet"
        " --no-update-check"
        " --dispersion-method blind"
        " --library-norm-method classic-fpkm"
        " --compatible-hits-norm"
        " --max-bundle-frags 100000000"
        " --library-type fr-unstranded"
        " --max-frag-multihits 1"
        " --no-diff {input.gtf} {params.mask} {input.gtfmask} {params.biascorr} {input.ref} {input.bam} {input.bam} --output-dir $outprefix 2>{log};"
        "cut -f1,5,7,10 $outprefix/genes.fpkm_tracking |grep -v tracking_id |sort > $outprefix/genes.fpkm_tracking.col15710;"
        "grep -E -w -v \"tracking_id|q2\" $outprefix/genes.read_group_tracking |cut -f1,4 |sort | cut -f1-4,6 | paste - $outprefix/genes.fpkm_tracking.col15710 | awk 'BEGIN {{ FS = \"\\t\" }} ;{{printf \"%s\\t%s\\t%s\\t%s\\t%s\\n\", $1, $4, $5, $2, $6}}' >{output.matrix};"
        "sed -i '1s/^/Gene_Id\\tGene_Name\\tLocus\\tReadCount\\tFPKM\\n/' {output.matrix};"

rule RSEM:
    input:
        bam = expand("{dir}/{{sample}}_ROW{{row}}/star/{{sample}}_ROW{{row}}_{genome}_Aligned.toTranscriptome.out.bam",
            dir=RESULT_OUTDIR,
            genome=GENOME_BASENAME),
        rsemidx = config['references']['rsemidx'] + ".seq"
    output:
        genecount = "{dir}/{sample}_ROW{row}_{genome}_RSEM.genes.results",
        isocount = "{dir}/{sample}_ROW{row}_{genome}_RSEM.isoforms.results",
        gbam = "{dir}/{sample}_ROW{row}_{genome}_RSEM.genome.sorted.bam",
        wig = "{dir}/{sample}_ROW{row}_{genome}_RSEM.sorted.wig",
        plot = "{dir}/{sample}_ROW{row}_{genome}_RSEM.pdf"
    message: "Running RSEM"
    params:
        rsemidx=config['references']['rsemidx']
    log:
        "{dir}/{sample}_ROW{row}_{genome}_RSEM.log"
    threads: 18    
    #run:
    shell:
        " outpref=$(echo {output.genecount} | sed -e 's,.genes.results,,'); "
        " /home/userrig/tools/rsem-1.2.21/rsem-calculate-expression --bam"
        " --output-genome-bam"
        " --seed 12345"
        " --forward-prob 0.5 {input.bam} {params.rsemidx} $outprefix 2>{log};"
        " /home/userrig/tools/rsem-1.2.21/rsem-bam2wig {output.gbam} {output.wig} $outprefix;"
        " export PATH=$PATH:/mnt/software/bin;"
        " /home/userrig/tools/rsem-1.2.21/rsem-plot-model $outprefix {output.plot};"

rule rnaseqQC:
    input:
        bam = expand("{dir}/{{sample}}_ROW{{row}}/star/{{sample}}_ROW{{row}}_{genome}_Aligned.sortedByCoord.out.bam",
            dir=RESULT_OUTDIR,
            genome=GENOME_BASENAME),
        bamidx = expand("{dir}/{{sample}}_ROW{{row}}/star/{{sample}}_ROW{{row}}_{genome}_Aligned.sortedByCoord.out.bam.bai",
            dir=RESULT_OUTDIR,
            genome=GENOME_BASENAME),
        rnaseqc_annotation = config['references']['rnaseqc_annotation'],
        ref = config['references']['genome']
    output:
        "{dir}/{sample}_ROW{row}_{genome}_RNASeqQC_complete.OK"
    log:
        "{dir}/{sample}_ROW{row}_{genome}_RNASeqQC.log"    
    params:
        mem = "-Xmx3g",
        sample=lambda wc: wc.sample + "-ROW" + wc.row
    threads:
        18
    message: "Running RNASeqQC"            
    shell:
        " outprefix=`dirname {output}`; "
        "java {params.mem} -XX:ParallelGCThreads={threads} -jar /mnt/AnalysisPool/libraries/tools/RNA-SeQC/RNA-SeQC_v1.1.7.jar -n 1000 -s \"{params.sample}|{input.bam}|RNASeqQC\" -t {input.rnaseqc_annotation} -r {input.ref} -noDoC -o $outprefix 2> {log};"
        "touch {output};"

rule star_mapping:
    input:
        r2 = expand("{fdemux_outdir}/{{sample}}_ROW{{row}}_merged_R2.trimmed.fastq.gz", 
            fdemux_outdir=FDEMUX_OUTDIR),
        staridx = config['references']['staridx']
    output:
        bam = "{dir}/{sample}_ROW{row}_{genome}_Aligned.sortedByCoord.out.bam",
        transbam = "{dir}/{sample}_ROW{row}_{genome}_Aligned.toTranscriptome.out.bam",
        counts = "{dir}/{sample}_ROW{row}_{genome}_ReadsPerGene.out.tab",
        wig = "{dir}/{sample}_ROW{row}_{genome}_Signal.Unique.str1.out.wig",
    #log:
    params:
        rg_id="FIXME-RG",
        lib_id="FIXME-libid",
        pu_id="FIXME-pu",
        sample=lambda wc: wc.sample + "-ROW" + wc.row,
        commentsheader=lambda wc: wc.dir + "/commentsheader.txt"
    #message:
    threads: 16# FIXME need optimization
    shell:# FIXME sleep 2
        "echo -e '@CO\tANNOTATIONFILE:{config[references][gtfsourcefile]}' > {params.commentsheader};"
        " outpref=$(echo {output.bam} | sed -e 's,Aligned.sortedByCoord.out.bam,,'); "
        " STAR --genomeDir {input.staridx}"
        " --outSAMattrRGline 'ID:{params.rg_id}\\tPL:{config[platform]}\\tPU:{params.pu_id}\\tLB:{params.lib_id}\\tSM:{params.sample}\\tCN:GIS'"
        " --outSAMheaderCommentFile {params.commentsheader}"
        " --runThreadN {threads}"
        " --genomeLoad LoadAndKeep"
        " --readFilesCommand zcat"
        " --outFilterType BySJout"
        " --outSAMtype BAM SortedByCoordinate"
        " --quantMode TranscriptomeSAM GeneCounts"
        " --outSAMmapqUnique 50"
        " --outSAMattributes NH HI AS nM NM MD"
        " --outBAMsortingThreadN {threads}"
        " --outSAMstrandField intronMotif"
        " --outWigType wiggle --outWigStrand Stranded --outWigNorm RPM"
        " --outFilterMultimapNmax 1"
        " --outFilterMismatchNmax 999"
        " --outFilterMismatchNoverLmax 0.04"
        " --outFilterIntronMotifs RemoveNoncanonical"
        " --alignEndsType EndToEnd"
        " --alignSJoverhangMin 8"
        " --alignSJDBoverhangMin 1"
        " --alignIntronMin 20"
        " --alignIntronMax 1000000"
        " --alignMatesGapMax 1000000"
        " --limitBAMsortRAM 20016346648"
        " --outFileNamePrefix $outpref"
        " --readFilesIn {input.r2};"
        " STAR --genomeDir {input.staridx} --genomeLoad Remove;"


rule trimming:
    input:
        fq="{prefix}_R2.fastq.gz"
    output:
        fq="{prefix}_R2.trimmed.fastq.gz"
    message:
        "Running trimming"
    log:
        "{prefix}_R2.trimmed.log"
    params:
        trim_tail_right=1,
        min_len=20
    shell:
        "zcat {input.fq} | prinseq-lite.pl -trim_tail_right {params.trim_tail_right}"
         " -min_len {params.min_len} -fastq stdin -out_good stdout 2>{log} " 
         " | gzip > {output.fq}"
    # later: subshell {} 2>log
    #run:
    # threads, log, params, benchmark


rule fluidigm_demux:
    # careful: fdemux splits after first _ so prefix should not contain underscore
    input:
        expand("{dir}/{{sample}}_merged_R{end}.fastq.gz", 
            dir=SAMPLE_MERGE_OUTDIR, 
            end=["1", "2"])
    output:
        # COL01_ROW36_S1-TGATAGAG_S100_L001_R2.fastq.gz
        temp(expand("{dir}/{{sample}}_ROW{row}_merged_R{end}.fastq.gz", 
            dir=FDEMUX_OUTDIR, 
            row=["{:02d}".format(x) for x in range(1, 41)], 
            end=["1", "2"]))
    message:
        "Running fluidigm_demux"
    params:
        indir=SAMPLE_MERGE_OUTDIR,
        outdir=FDEMUX_OUTDIR
    shell:
        #'perl /home/userrig/pipelines/fluidigmdemux/mRNASeqHT_demultiplex_v2.pl -i {params.indir} -o {params.outdir}; '
        'perl /mnt/projects/rpd/devs/andreas/fluidigm_800_singlecell/mrnaseqht_demux.git/mRNASeqHT_demultiplex.pl -i {params.indir} -o {params.outdir}; '
        

rule readunit_merge:
    input:
        lambda wc: list(chain.from_iterable(
            [fastqs_from_unit(config["readunits"][ru]) for ru in config["samples"][wc.sample]]))
    output:
        r1=temp(expand("{dir}/{{sample}}_merged_R1.fastq.gz",  
            dir=SAMPLE_MERGE_OUTDIR)),
        r2=temp(expand("{dir}/{{sample}}_merged_R2.fastq.gz",  
            dir=SAMPLE_MERGE_OUTDIR))
    message:
        "Merging read units (e.g. lanes)"
    #log:
    shell:
        'ls {input} | grep "_R1_" | sort | xargs cat > {output.r1};'
        ' ls {input} | grep "_R2_" | sort | xargs cat > {output.r2}'