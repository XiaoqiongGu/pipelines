assert 'references' in config
assert 'genome' in config['references']


rule gatk_selectvariants:
    input:
        vcf='{prefix}.vcf',
        ref=config["references"]["genome"],
    output:
        vcf=temp("{prefix}.{type,(snp|indel)}.vcf")
    log:
        "{prefix}.{type,(snp|indel)}.log"
    params:
        type = lambda wildcards: wildcards.type.upper()
    threads: 4
    message:
        "Extracting {params.type} from {input.vcf}"
    shell:
        "GATK_THREADS={threads} GATK_MEM=16g gatk_wrapper"
        " -R {input.ref} -V {input.vcf} -o {output.vcf}"
        " -T SelectVariants -nt {threads} -selectType {params.type} >& {log}"


rule gatk_hard_filter_snps:
    input:
        vcf='{prefix}.snp.vcf',
        ref=config["references"]["genome"],
    output:
        vcf='{prefix}.snp_hfilter.vcf'
    log:
        '{prefix}.snp_hfilter.vcf.log'
    params:
        filter_name = 'snp_default_hard_filter',
        filter_expr = 'QD < 2.0 || FS > 60.0 || MQ < 40.0 || MQRankSum < -12.5 || ReadPosRankSum < -8.0'
    threads:
        # not used by needed as UGE/Java/OS workaround in GIS
        4
    shell:
        "GATK_THREADS={threads} GATK_MEM=16g gatk_wrapper"
        " -T VariantFiltration -R {input.ref} -V {input.vcf}"
        " -o {output.vcf} --filterExpression '{params.filter_expr}'"
        " --filterName {params.filter_name} >& {log}"


rule gatk_hard_filter_indels:
    input:
        vcf='{prefix}.indel.vcf',
        ref=config["references"]["genome"],
    output:
        vcf='{prefix}.indel_hfilter.vcf'
    log:
        '{prefix}.indel_hfilter.vcf.log'
    params:
        filter_name = 'indel_default_hard_filter',
        filter_expr = 'QD < 2.0 || FS > 200.0 || ReadPosRankSum < -20.0'
    threads:
        # not used by needed as UGE/Java/OS workaround in GIS
        4
    shell:
        "GATK_THREADS={threads} GATK_MEM=16g gatk_wrapper"
        " -T VariantFiltration -R {input.ref} -V {input.vcf}"
        " -o {output.vcf} --filterExpression '{params.filter_expr}'"
        " --filterName {params.filter_name} >& {log}"

