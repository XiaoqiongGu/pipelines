"""
Based on rules/variant_calling/gatk_haplotype_caller.rules from https://bitbucket.org/johanneskoester/snakemake-workflows/ (commit fa47806)
- original author Johannes KÃ¶ster (http://johanneskoester.bitbucket.org)
- original license: MIT
"""

import pipes
import gzip
import io    

assert 'references' in config
assert 'genome' in config["references"]
#def _gatk_multi_arg(flag, files):
#    flag += " "
#    return " ".join(flag + f for f in files)


rule gatk_haplotype_caller:
    input:
        bam = "{prefix}.bam",
        bai = "{prefix}.bam.bai",
        ref = config["references"]["genome"],
        bed = BED_FOR_REGION_TEMPLATE
    output:
        gvcf = temp("{prefix}.{ctr,[0-9]+}.g.vcf.gz"),
        tbi = temp("{prefix}.{ctr,[0-9]+}.g.vcf.gz.tbi"),
    log:
        "{prefix}.{ctr}.g.vcf.gz.log"
    params:
        custom = config.get("params_gatk", ""),
        padding_arg = _get_padding_arg(),
        het_arg = "--heterozygosity {config[heterozygosity]}" if config.get('heterozygosity') else "",
        het_indel_arg = "--indel_heterozygosity {config[indel_heterozygosity]}" if config.get('indel_heterozygosity') else ""
    threads:
        # original comment: "haplotype caller currently does not reliably
        # use more than 2 threads".  we found it to not work reliably with
        # anything >1.
        # previously set higher to work around UGE/Java/OS vmem problem in GIS
        1
    run:
        # no need to call if bed is empty
        num_regs = 0
        with open(input.bed) as fh:
            for line in fh:
                if len(line.strip()):
                    num_regs += 1
        if num_regs:
            shell(
                "GATK_THREADS={threads} GATK_MEM=16g gatk_wrapper"
                " -T HaplotypeCaller -R {input.ref} -I {input.bam}"
                " -L {input.bed} {params.padding_arg} {params.custom} {params.het_arg} {params.het_indel_arg}"
                " --emitRefConfidence GVCF"
                " --dbsnp {config[references][dbsnp]}"#-nct {threads} "
                " -o {output.gvcf} >& {log}")
        else:
            shell("echo -n \"\" | gzip > {output.gvcf}; touch {output.tbi}; echo 'Creating empty output' > {log}")


localrules: concat_split_vcfs
#ruleorder: concat_split_vcfs > bgzip
rule concat_split_vcfs:
    # combine [g|gt].vcfs which where split by region. simply
    # parse in order and keep only header of first one.  FIXME replies
    # on unzipped input which is a waste of space. Note though that
    # gzip reading in Python is infamously slow.
    input:
        gvcfs = expand("{{prefix}}.{ctr}.{{type}}.vcf.gz",
                       ctr = range(len(config["references"]["region_clusters"])))
    output:
        gvcf = "{prefix}.concat.{type,(g|gt)}.vcf.gz",
    log:
        "{prefix}.concat.{type}.vcf.gz.log"
    run:
        bgzip_pipe = pipes.Template()
        bgzip_pipe.append('bgzip', '--')
        header_printed = False
        with bgzip_pipe.open(output.gvcf, 'w') as fhout:
            for f in input.gvcfs:
                #  https://www.reddit.com/r/Python/comments/2olhrf/fast_gzip_in_python/
                with gzip.open(f) as fhingz:
                    with io.BufferedReader(fhingz) as fhin:
                        had_header = False
                        for line in fhin:
                            line = line.decode()
                            if line.startswith('#'):
                                if not header_printed:
                                    had_header = True
                                    fhout.write(line)
                            else:
                                fhout.write(line)
                        if had_header:
                            header_printed = True                    

                            
def gvcf_genotyper_input(wc):
    if config.get("joint_calls"):
        gvcfs = []
        for sample in config['samples']:
            # reused out_templ
            gvcfs.append(out_templ.format(sample=sample) + ".concat.g.vcf.gz")
    else:
        gvcfs = ["{}.concat.g.vcf.gz".format(wc.prefix)]
    return gvcfs

                
rule gatk_genotyping:
    input:
        ref = config["references"]["genome"],
        gvcfs = gvcf_genotyper_input,
        #tbi = lambda wc: [x + ".tbi" for x in gvcf_genotyper_input],
        bed = BED_FOR_REGION_TEMPLATE
    output:
        vcf = temp("{prefix}.{ctr,[0-9]+}.gt.vcf.gz"),
        tbi = temp("{prefix}.{ctr,[0-9]+}.gt.vcf.gz.tbi")
    log:
        "{prefix}.{ctr}.gt.vcf.gz.log"
    params:
        custom = config.get("params_gatk", ""),
    threads:
        2
    run:
        # no need to call if bed is empty
        num_regs = 0
        with open(input.bed) as fh:
            for line in fh:
                if len(line.strip()):
                    num_regs += 1
        if num_regs:
            gvcfs_arg = '-V ' + ' -V '.join(input.gvcfs)
            shell("GATK_THREADS={threads} GATK_MEM=16g gatk_wrapper"
                  " -T GenotypeGVCFs {gvcfs_arg} -nt {threads} {params.custom}"
                  " -L {input.bed} -R {input.ref}"
                  " --dbsnp {config[references][dbsnp]} -o {output.vcf} >& {log}")
        else:
            shell("echo -n \"\" | gzip > {output.vcf}; touch {output.tbi}; echo 'Creating empty output' > {log}")
                  
