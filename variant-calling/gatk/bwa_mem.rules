# standard library imports
#
import os

# third party imports
#
#/

# project specific imports
#
from readunits import gen_rg_lib_id, gen_rg_pu_id
from readunits import fastqs_from_unit, get_sample_for_unit


assert 'mark_dups' in config
assert 'samples' in config
assert 'platform' in config


# FIXME to conf once downstream handling clear
MARK_SHORT_SPLITS="-M"# "-M" or ""


# can't avoid race condition. just don't do it
#rule bwa_index:
#    input:
#        "{prefix}.{suffix}"
#    output:
#        "{prefix}.{suffix,(fasta|fa)}.pac",
#        "{prefix}.{suffix,(fasta|fa)}.bwt",
#        "{prefix}.{suffix,(fasta|fa)}.sa"
#    log:
#        "{prefix}.{suffix,(fasta|fa)}.index.log"
#    shell:
#        "bwa index {input} >& {log};"
#

def mark_dups_pipe_cmd(before="", after=""):
    """FIXME review once MARK_SHORT_SPLITS is in config

    before and after are commands added before and after samblaster
    and can be used e.g. for conversion from BAM to BAM (samblaster needs SAM)

    return command will always end in pipe
    """

    if config['mark_dups']:
        if before:
            cmd = "{} | ".format(before)
        else:
            cmd = ""

        cmd += " samblaster {MARK_SHORT_SPLITS} | "
        if after:
            cmd += " {} | ".format(after)
        return cmd
    else:
        return ""


rule unit_merge:
    """
    Merge bam files for multiple units into one for the given sample
    (or copy if just one).
    """
    input:
        # switch expand and wildcards and funny things happen
        lambda wildcards: expand('{prefix}/unit-{unit}.bwamem.bam',
                                 prefix=wildcards.prefix,
                                 unit=config['samples'][wildcards.sample])
    output:
        temp('{prefix}/sample-{sample}.bwamem.bam')
    log:
        '{prefix}/sample-{sample}.bwamem.bam.merge.log'
    message:
        "Merging files"
    threads:
        # FIXME waste for ln
        8
    run:
        # not running mark_dups_pipe_cmd again since not read name sorted anymore
        if len(input) > 1:
            shell("samtools merge -@ {threads} {output} {input} >& {log};")
        else:
            shell("ln {input} {output} >& {log};")


# Expecting SE/PE input read length >70 (BWA-MEM limitation)
rule map_mdups_sort:
    """
    - fixmate (and samblaster) only work on name sorted files.
    - fixmate ignores secondary  alignments, i.e. safe to use with bwa mem -M:
      http://sourceforge.net/p/samtools/mailman/message/30556922/
    - Setting read groups correctly is tricky and also depends on downstream programs.
      See e.g. http://gatkforums.broadinstitute.org/gatk/discussion/6472/read-groups
      For example for BQSR PU takes precedence over ID. PU should contain lane.
    - More threads mean more memory because of sorting
    - This originated from the equally named SG10K rule
    """
    input:
        reffa=config['references']['genome'],
        bwaindex=config['references']['genome'] + ".pac",# incomplete but should do
        fastqs=lambda wildcards: fastqs_from_unit(config["readunits"][wildcards.unit])
    output:
        bam=temp('{prefix}/unit-{unit}.bwamem.bam')
    log:
        '{prefix}/unit-{unit}.bwamem.bam.log'
    params:
        mark_short_splits=MARK_SHORT_SPLITS,
        bwa_mem_custom_args=config.get("bwa_mem_custom_args", ""),
        sort_mem='250M',
        rg_id=lambda wildcards: config["readunits"][wildcards.unit]['rg_id'],# always set
        lib_id=lambda wildcards: gen_rg_lib_id(config["readunits"][wildcards.unit]),
        pu_id=lambda wildcards: gen_rg_pu_id(config["readunits"][wildcards.unit]),
        sample=lambda wildcards: get_sample_for_unit(wildcards.unit, config)
    message:
        'Aligning PE reads, fixing mate information, marking duplicates (if set) and converting to BAM'
    threads:
        # 32 is where it seems to max out in GIS. samtools threading
        # has little effect on overall runtime. but on memory. standard nodes at nscc only allow 24
        16
    shell:
        "{{ bwa mem {params.mark_short_splits} -t {threads}"
        " -R '@RG\\tID:{params.rg_id}\\tPL:{config[platform]}\\tPU:{params.pu_id}\\tLB:{params.lib_id}\\tSM:{params.sample}\\tCN:GIS'"
        " {params.bwa_mem_custom_args} {input.reffa} {input.fastqs} |"
        " samtools fixmate -O sam - - |"
        + mark_dups_pipe_cmd() +
        " samtools view -bu -o - |"
        " samtools sort -@ {threads} -m {params.sort_mem} -o {output.bam} -T {output.bam}.tmp -; }} >& {log}"
