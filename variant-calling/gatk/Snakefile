# standard library imports
#
import os
import subprocess
import shutil

# third party imports
#
from snakemake.utils import report

# project specific imports
#
LIB_PATH = os.path.abspath(
    os.path.join(os.path.dirname(os.path.realpath(workflow.snakefile)), "..", "..", "lib"))
if LIB_PATH not in sys.path:
    sys.path.insert(0, LIB_PATH)
from utils import chroms_and_lens_from_fasta


RESULT_OUTDIR = 'out'


# non-login bash
shell.executable("/bin/bash")
shell.prefix("source rc/snakemake_env.rc;")


include: "../../rules/snpeff.rules"
include: "../../rules/samtools.rules"
include: "../../rules/logging.rules"
include: "../../rules/report.rules"
include: "../../rules/vcf.rules"
include: "../../rules/region_clusters.rules"
include: "../../rules/sambamba.rules"
include: "bwa_mem.rules"
include: "gatk_mapping.rules"
include: "gatk_haplotype_caller.rules"
include: "gatk_variant_recalibrator.rules"
include: "gatk_hard_filter.rules"


localrules: final, report

# expected output depends on options
out_templ = os.path.join(RESULT_OUTDIR, "{sample}/{sample}.bwamem")
if config['mark_dups']:
    out_templ += ".dedup"
if config['seqtype'] != 'targeted':
    out_templ += ".bqsr"
if config['seqtype'] == 'WGS':
     var_filters = ['hfilter', 'vqsr']
else:
     var_filters = ['hfilter']


# FIXME can be achieved with --until rule as well
if config.get('bam_only'):
    rule final:
        input:
            expand(out_templ + ".bamstats/stats.txt",
                   sample=config['samples']),
            report="report.html",
else:
    rule final:
        input:
            # bam stats per sample
            expand(out_templ + ".bamstats/stats.txt",
                   sample=config['samples']),
            # filtered variants per type per sample
            expand(out_templ + ".concat.gt.{vartype}_{filters}.snpeff.vcf.gz.tbi",
                   sample=config['samples'], vartype=['snp', 'indel'], filters=var_filters),
            # gvcfs per sample
            expand(out_templ + ".concat.g.vcf.gz.tbi",
                   sample=config['samples']),    
            report="report.html",
                   
            
