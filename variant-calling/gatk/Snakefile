# standard library imports
#
import os
import subprocess
import shutil

# third party imports
#
from snakemake.utils import report

# project specific imports
#
LIB_PATH = os.path.abspath(
    os.path.join(os.path.dirname(os.path.realpath(workflow.snakefile)), "..", "..", "lib"))
if LIB_PATH not in sys.path:
    sys.path.insert(0, LIB_PATH)
from readunits import gen_rg_lib_id, gen_rg_pu_id, fastqs_from_unit, get_sample_for_unit
from pipelines import chroms_and_lens_from_from_fasta


RESULT_OUTDIR = './out'


# non-login bash
shell.executable("/bin/bash")
shell.prefix("source rc/snakemake_env.rc;")

include: "../../rules/samtools.rules"
include: "../../rules/logging.rules"
include: "bwa_mem.rules"
include: "gatk_mapping.rules"
include: "gatk_haplotype_caller.rules"
include: "gatk_variant_recalibrator.rules"
include: "gatk_hard_filter.rules"


# always hard filter
FINAL_VCFS = []
FINAL_VCFS += expand(
    os.path.join(RESULT_OUTDIR, "{sample}/all_genotyped.snp_hfilter.vcf"),
    sample=config['samples'])
FINAL_VCFS += expand(
    os.path.join(RESULT_OUTDIR, "{sample}/all_genotyped.indel_hfilter.vcf"),
    sample=config['samples'])

# try recal only for WGS
if config['seqtype']=='WGS':
    FINAL_VCFS += expand(
        os.path.join(RESULT_OUTDIR, "{sample}/all_genotyped.snp_recal.vcf"),
        sample=config['samples'])
    FINAL_VCFS += expand(
        os.path.join(RESULT_OUTDIR, "{sample}/all_genotyped.indel_recal.vcf"),
        sample=config['samples']),


if config['seqtype'] == 'targeted':
    localrules: final, report, prep_bed_files, gatk_catvariants, gatk_hardfilter, gatk_recalibrate_bam gatk_recalibrate_info
else:    
    localrules: final, report, prep_bed_files, gatk_catvariants, gatk_hardfilter

    
rule final:
    input:
        FINAL_VCFS,
        report="report.html"


rule report:
    input:
        readme = os.path.join(os.path.dirname(os.path.realpath(workflow.snakefile)), "README.rst")
    output:
        html="report.html"
    params:
        analysis_name = config.get('analysis_name', ', '.join(config['samples'].keys()))
    run:
        readme = "EMPTY"
        with open(input.readme) as fh:
            readme = fh.read()
            
        report("""
=================================================================
Pipeline {config[ELM][pipeline_name]} run on {params.analysis_name}
=================================================================

Version Info
------------

{config[ELM][pipeline_version]} 

""" + readme, output.html, metadata="Research Pipeline Development Team (rpd@gis.a-star.edu.sg)",# **input)
               conf="conf.yaml")
        # from doc "All keywords not listed below are intepreted as paths to files that shall be embedded into the document."
        # **input just attaches all input, but None is not allowed.
        # Attaching configfile is more a crutch to have at least something


rule prep_bed_files:
    """Prepare bed files to be able to run haplotype caller per chromosome
    to speed things up. if we also have a global bed file intersect
    with this one.

    NOTE: this might produce empty bed files!

    """
    input:
        ref = config['references']['genome'],
        reffai = config['references']['genome'] + ".fai"
    output:
        bed = temp(expand(os.path.join(RESULT_OUTDIR, "chr.split.{ctr}.bed"),
                          ctr=range(config["references"]["num_chroms"])))
    log:
        os.path.join(RESULT_OUTDIR, "chr.split.log")
    params:
        outbedfmt = os.path.join(RESULT_OUTDIR, "chr.split.{}.bed")
    message:
        "Preparing intervals for splitting jobs"
    run:
        for (i, (s, l)) in enumerate(chroms_and_lens_from_from_fasta(input.ref)):
            outbed = params.outbedfmt.format(i)
            tmpbed = outbed + ".tmp"
            # write one bed per chrom
            with open(tmpbed, 'w') as fh:
                if s not in config['references'].get('excl_chrom', []):
                    fh.write("{}\t0\t{}\n".format(s, l))
                # else: empty file
                
            # intersect with given bed if needed
            # NOTE: might produce empty files (which is what we want)
            # Can also deal with empty import (create above if in excl)
            if config['intervals']:
                shell("bedtools intersect -a {} -b {} > {} 2> {{log}}".format(
                    config['intervals'], tmpbed, outbed))
                os.unlink(tmpbed)
            else:
                shutil.move(tmpbed, outbed)
        

