# standard library imports
#
import os
import subprocess
import shutil

# third party imports
#
from snakemake.utils import report

# project specific imports
#
LIB_PATH = os.path.abspath(
    os.path.join(os.path.dirname(os.path.realpath(workflow.snakefile)), "..", "..", "lib"))
if LIB_PATH not in sys.path:
    sys.path.insert(0, LIB_PATH)
from pipelines import chroms_and_lens_from_from_fasta


RESULT_OUTDIR = './out'


# non-login bash
shell.executable("/bin/bash")
shell.prefix("source rc/snakemake_env.rc;")

include: "../../rules/samtools.rules"
include: "../../rules/logging.rules"
include: "../../rules/report.rules"
include: "../../rules/vcf.rules"
include: "../../rules/sambamba.rules"
include: "bwa_mem.rules"
include: "gatk_mapping.rules"
include: "gatk_haplotype_caller.rules"
include: "gatk_variant_recalibrator.rules"
include: "gatk_hard_filter.rules"


localrules: final, report, prep_bed_files, gatk_catvariants, gatk_hardfilter


# expected output depends on options
out_templ = os.path.join(RESULT_OUTDIR, "{sample}/{sample}.bwamem")
if config['mark_dups']:
    out_templ += ".dedup"
if config['seqtype'] != 'targeted':
    out_templ += ".bqsr"
if config['seqtype'] == 'WGS':
     var_filters = ['hfilter', 'vqsr']
else:
     var_filters = ['hfilter']

     
rule final:
    input:
        expand(out_templ + ".bamstats/stats.txt",
               sample=config['samples']),
        expand(out_templ + ".gt.{vartype}_{filters}.vcf.gz",
               sample=config['samples'], vartype=['snp', 'indel'], filters=var_filters),
        expand(out_templ + ".concat.g.vcf.gz",
               sample=config['samples']),
        report="report.html"


rule prep_bed_files:
    """Prepare bed files to be able to run haplotype caller per chromosome
    to speed things up. if we also have a global bed file intersect
    with this one.

    NOTE: this might produce empty bed files!

    """
    input:
        ref = config['references']['genome'],
        reffai = config['references']['genome'] + ".fai"
    output:
        bed = temp(expand(os.path.join(RESULT_OUTDIR, "chr.split.{ctr}.bed"),
                          ctr=range(config["references"]["num_chroms"])))
    log:
        os.path.join(RESULT_OUTDIR, "chr.split.log")
    params:
        outbedfmt = os.path.join(RESULT_OUTDIR, "chr.split.{}.bed")
    message:
        "Preparing intervals for splitting jobs"
    run:
        for (i, (s, l)) in enumerate(chroms_and_lens_from_from_fasta(input.ref)):
            outbed = params.outbedfmt.format(i)
            tmpbed = outbed + ".tmp"
            # write one bed per chrom
            with open(tmpbed, 'w') as fh:
                if s not in config['references'].get('excl_chrom', []):
                    fh.write("{}\t0\t{}\n".format(s, l))
                # else: empty file
                
            # intersect with given bed if needed
            # NOTE: might produce empty files (which is what we want)
            # Can also deal with empty import (create above if in excl)
            if config['intervals']:
                shell("bedtools intersect -a {} -b {} > {} 2> {{log}}".format(
                    config['intervals'], tmpbed, outbed))
                os.unlink(tmpbed)
            else:
                shutil.move(tmpbed, outbed)
        

