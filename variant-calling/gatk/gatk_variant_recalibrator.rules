"""
Based on rules/variant_calling/gatk_variant_recalibrator.rules from https://bitbucket.org/johanneskoester/snakemake-workflows/ (commit fa47806)
- original author Johannes KÃ¶ster (http://johanneskoester.bitbucket.org)
- original license: MIT
"""

import shutil

assert 'references' in config
assert 'genome' in config['references']

# one line only
RECAL_FAIL_MSG = "Variant recalibration failed (there might be a perfectly valid reason for this). Try hard filtering on the input file instead"

        
def _get_recal_params(wildcards):
    if wildcards.type == "snp":
        return (
            "-resource:hapmap,known=false,training=true,truth=true,prior=15.0 {hapmap} "
            "-resource:omni,known=false,training=true,truth=true,prior=12.0 {omni} "
            "-resource:1000G,known=false,training=true,truth=false,prior=10.0 {g1k} "
            "-resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {dbsnp} "
            "-an QD -an MQ -an MQRankSum -an ReadPosRankSum -an FS -an SOR -an DP -an InbreedingCoeff "
            " -mode SNP"
        ).format(**config["references"])
    else:
        return (
            "--maxGaussians 4 "
            "-resource:mills,known=false,training=true,truth=true,prior=12.0 {mills} "
            "-resource:dbsnp,known=true,training=false,truth=false,prior=2.0 {dbsnp} "
            " -an QD -an DP -an FS -an SOR -an ReadPosRankSum -an MQRankSum -an InbreedingCoeff "
            " -mode INDEL"
        ).format(**config["references"])


rule gatk_variant_recalibration:
    # Note: this can fail due to the lack of data with: "no data found"
    # https://gatkforums.broadinstitute.org/gatk/discussion/3216/error-stack-trace-unable-to-retrieve-result-a-gatk-runtime-error-has-occurred
    # "VQSR should not be used on exome and target resequencing. best to use the hard-filtering recommendations"
    # hard filtering guide lines: http://gatkforums.broadinstitute.org/gatk/discussion/2806/howto-apply-hard-filters-to-a-call-set
    input:
        ref = config["references"]["genome"],
        vcf = "{prefix}.vcf.gz"
    output:
        recal = temp("{prefix}.{type,(snp|indel)}.vqsr"),
        tranches = temp("{prefix}.{type,(snp|indel)}.tranches"),
        plotting = temp("{prefix}.{type,(snp|indel)}.plotting.R")
    benchmark:
        "{prefix}.{type,(snp|indel)}.vqsr.gatk_variant_recalibration.benchmark.log"
    log:
        "{prefix}.{type,(snp|indel)}.vqsr.log"
    params:
        recal_params = _get_recal_params,
        params_gatk = config.get("params_gatk", "")
    threads: 8
    shell:
        # might fail due to lack of variants. captured with RECAL_FAIL_MSG
        "set +e && GATK_THREADS={threads} GATK_MEM=16g gatk_wrapper"
        " -T VariantRecalibrator -R {input.ref} -input {input.vcf}"
        " {params} -nt {threads}"
        " -recalFile {output.recal} -tranchesFile {output.tranches}"
        " -rscriptFile {output.plotting} >& {log} || {{ echo '{RECAL_FAIL_MSG}' > {output.recal}; touch {output}; }}"


rule gatk_apply_variant_recalibration:
    input:
        ref = config["references"]["genome"],
        vcf = "{prefix}.vcf.gz",
        recal = "{prefix}.{type}.vqsr",
        tranches = "{prefix}.{type}.tranches"
    output:
        "{prefix}.{type,(snp|indel)}_vqsr.vcf.gz"
    benchmark:
        "{prefix}.{type,(snp|indel)}_vqsr.vcf.gz.gatk_apply_variant_recalibration.benchmark.log"
    log:
        "{prefix}.{type,(snp|indel)}_vqsr.vcf.gz.log"
    params:
        mode = lambda wc: wc.type.upper(),
        custom = config.get("params_gatk", ""),
        ts = lambda wc: "99.5" if wc.type.upper()=="SNP" else "99.0"
    threads:
        8
    run:
        recal_failed = False
        with open(input.recal) as fh:
            for line in fh:
                if RECAL_FAIL_MSG in line:
                    recal_failed = True
                    break
            #import sys; sys.stderr.write("DEBUG: Copying {} to {}\n".format(input.recal, output))
            if recal_failed:
                shutil.copyfile(input.recal, str(output))
            else:
                shell(" GATK_THREADS={threads} GATK_MEM=16g gatk_wrapper -T ApplyRecalibration"
                      " -R {input.ref} -nt {threads} -input {input.vcf}"
                      " -mode {params.mode} {params.custom} "
                      "-recalFile {input.recal} --ts_filter_level {params.ts} "
                      "-tranchesFile {input.tranches} -o {output} >& {log}")
