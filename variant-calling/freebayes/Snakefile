# standard library imports
#
import os
import subprocess
import shutil

# third party imports
#
from snakemake.utils import report

# project specific imports
#
LIB_PATH = os.path.abspath(
    os.path.join(os.path.dirname(os.path.realpath(workflow.snakefile)), "..", "..", "lib"))
if LIB_PATH not in sys.path:
    sys.path.insert(0, LIB_PATH)


RESULT_OUTDIR = 'out'


# non-login bash
shell.executable("/bin/bash")
shell.prefix("source rc/snakemake_env.rc;")


include: "../../rules/snpeff.rules"
include: "../../rules/samtools.rules"
include: "../../rules/logging.rules"
include: "../../rules/report.rules"
include: "../../rules/vcf.rules"
include: "../../rules/sambamba.rules"
include: "bwa_mem.rules"


localrules: final, report


# expected output depends on options
out_templ = os.path.join(RESULT_OUTDIR, "{sample}/{sample}.bwamem")
if config['mark_dups']:
    out_templ += ".dedup"

rule final:
    input:
        # bam stats per sample
        expand(out_templ + ".bamstats/stats.txt",
               sample=config['samples']),
        expand(out_templ + ".freebayes.hfilter.snpeff.vcf.gz.tbi",
               sample=config['samples'])
               

localrules: prepare_regions        
rule prepare_regions:
    """Freebayes has a parallelization script. We use it on the full
    reference and filter later. This can have unintended side effects if
    you are really only interest in a small region of an otherwise fully
    sequenced samples!"""
    input:
        reffa = config["references"]["genome"]
    output:
        reg_list = '{dir}/regions.txt'
    params:
        # 100k default as given on website
        reg_size = 1000000
    log:
        '{dir}/regions.txt.log'
    shell:
        "fasta_generate_regions.py {input.reffa} {params.reg_size} >{output.reg_list} 2>{log}"


rule freebayes:
    input:
        reffa = config["references"]["genome"],
        reg_list = '{dir}/regions.txt',
        bam = '{dir}/{basename}.bam'
    output:
        vcf = '{dir}/{basename}.freebayes.vcf.gz'
    log:
        '{dir}/{basename}.freebayes.vcf.gz.log'
    params:
        fb_args = config['fb_args']
    threads:
        16
    shell:
        "{{"
        " freebayes-parallel {input.reg_list} {threads} {params.fb_args}"
        "   -f {input.reffa} {input.bam} | bgzip > {output.vcf};"
        "}} >& {log}"

localrules: postprocess
rule postprocess:
    input:
        vcf = '{prefix}.freebayes.vcf.gz'
    output:
        vcf = '{prefix}.freebayes.hfilter.vcf.gz'
    log:
        '{prefix}.freebayes.hfilter.vcf.gz.log'
    params:
        bedarg = "-T {}".format(config['bed']) if config['bed'] else "",
        minvq = config['minvq']
    shell:
        """bcftools filter -e 'QUAL<{params.minvq}' {params.bedarg} -O z -o {output.vcf} {input.vcf} >& {log}"""
        
