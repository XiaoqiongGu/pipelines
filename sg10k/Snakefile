import os
from snakemake.utils import report

# non-login bash
shell.executable("/bin/bash")
# activate "unofficial bash strict mode" http://www.redsymbol.net/articles/unofficial-bash-strict-mode/
shell.prefix("set -euo pipefail;")


# FIXME to conf once downstream handling clear
MARK_SHORT_SPLITS="-M"# "-M" or ""

# Debugging config:
#for k, v in config.items():
#        print("DEBUG {} {}".format(k, v))


include: "rules/samtools.rules"
include: "rules/bwa.rules"

        
rule final:
  input:
        config['sample'] + '.bwamem.fixmate.mdups.srt.merged.bam',
        config['sample'] + '.bwamem.fixmate.mdups.srt.merged.stats.txt'    
  message: 'Pipeline run successfully completed'
  # if output is created here, deleting the 'input' will not result in rerun
  #output:  'COMPLETE'
  #shell:   'touch {output}'


rule sample_merge:
    """
    Merge bam files for multiple units into one for the given sample.
    If the sample has only one unit, a symlink will be created.
    """
    input:
        expand("{unit}.bwamem.fixmate.mdups.srt.bam", unit=config["units"])
    threads: 16
    output:
        config['sample'] + '.bwamem.fixmate.mdups.srt.merged.bam'
    run:
        if len(input) > 1:
            shell("""
            module load samtools/{config[modules][samtools]}; 
            samtools merge -@ {threads} {output} {input}
            """)
        else:
            shell("ln -s {input} {output} && touch -h {output}")


            
# Expecting SE/PE input read length >70 (BWA-MEM limitation)
rule map_mdups_sort:
    input:
        reffa = config['references']['genome'],
        reffai = config['references']['genome'] + ".pac",
        fastqs = lambda wildcards: config["units"][wildcards.unit]
    output:
        bam=temp("{unit}.bwamem.fixmate.mdups.srt.bam")
    params:
        mark_short_splits=MARK_SHORT_SPLITS,
        bwa_mem_custom_args=config.get("bwa_mem_custom_args", "")
    message:
        'Aligning PE reads, fixing mate information, marking duplicates and converting to sorted BAM'
    threads:
        16
        # FIXME how does runtime scale with threads?
    benchmark:
        # should have same name as rule
        'benchmark/map_mdups_sort.txt'
    #log:
    #    # should have same name as rule
    #    'logs/map_mdups_sort.txt'
    shell:
        # fixmate only works on name sorted files. ignores secondary 
        # alignments, i.e. safe to use with bwa mem -M:
        # http://sourceforge.net/p/samtools/mailman/message/30556922/
        # 
	# samtools sort might need control of max thread memory to not go 
        # over limit for v1.3 it's 768M. if we use 16 threads this amounts 
        # to max 12.3GB (on top of whatever bwa (8GB for HG) etc. need).
        # FIXME: set threads to 12?
	#
        # using samtools instead of sambamba for view and sort:
        # http://genomespot.blogspot.sg/2015/03/sambamba-vs-samtools.html says
        # runtime difference are not too huge and samtools is the conservative
        # choice anyway
        #
        "module load bwa/{config[modules][bwa]}; "
        "module load samtools/{config[modules][samtools]}; "
        "module load samblaster/{config[modules][samblaster]}; "
        "bwa mem {params.mark_short_splits} -t {threads}"
        " -R '@RG\tID:{wildcards.unit}\tPL:{config[platform]}\tPU:PU-{wildcards.unit}\tLB:LB-{config[sample]}\tSM:{config[sample]}\tCN:GIS'"
        " {params.bwa_mem_custom_args} {input.reffa} {input.fastqs} | "
        " samtools fixmate -O sam - - | "
        " samblaster {params.mark_short_splits} | "
        " samtools view -@ {threads} -bu -o - | "
        " samtools sort -@ {threads} -o {output.bam} -"

# FIXME rule report:
# write program versions
# how it works
    
    
