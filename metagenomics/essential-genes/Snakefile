# standard library imports
#
import os

# third party imports
#
from snakemake.utils import report

# project specific imports
#
LIB_PATH = os.path.abspath(
    os.path.join(os.path.dirname(os.path.realpath(workflow.snakefile)), "..", "..", "lib"))
if LIB_PATH not in sys.path:
    sys.path.insert(0, LIB_PATH)
from readunits import gen_rg_lib_id, gen_rg_pu_id, fastqs_from_unit, get_sample_for_unit


RESULT_OUTDIR = 'out'


# non-login bash
shell.executable("/bin/bash")
shell.prefix("source rc/snakemake_env.rc;")

include: "../../rules/samtools.rules"
include: "../../rules/logging.rules"
include: "../../rules/report.rules"
include: "bwa_mem.rules"
include: "lofreq.rules"


localrules: final, report, prep_bed_files


rule final:
    input:
        expand(os.path.join(RESULT_OUTDIR, "{sample}/{sample}.bwamem.lofreq.both.ann.vcf.gz"),
                           sample=config['samples']),
        expand(os.path.join(RESULT_OUTDIR, "{sample}/{sample}.bwamem.lofreq.bam.cov.txt.gz"),
                           sample=config['samples']),
        "report.html",
        

rule coverage:
    input:
        bam='{prefix}.bam'
    output:
        cov='{prefix}.bam.cov.txt.gz'
    log:
        '{prefix}.bam.cov.log'
    benchmark:
        '{prefix}.bam.cov.coverage.benchmark.log'
    message:
        'Computing coverage'
    shell:
        'genomeCoverageBed -d -ibam {input.bam} | gzip > {output}'

        

rule snpeff:
    input:
        vcfgz="{prefix}.vcf.gz",
    output:
        vcfgz="{prefix}.ann.vcf.gz",
        stats="{prefix}.stats",
        #statscsv="{prefix}_stats.csv"
    log:
        "{prefix}.ann.vcf.log"
    benchmark:
        "{prefix}.ann.vcf.snpeff.benchmark.log"
    params:
        genome=config['references']['snpeff_genome']
    message:
        "Running SNPeff"
    shell:
        # see also http://lab.loman.net/2012/11/16/how-to-get-snpeff-working-with-bacterial-genomes-from-ncbi/
        "SNPEFF_THREADS={threads} SNPEFF_MEM=8g snpeff_wrapper"
        " -c $(dirname $(which snpeff_wrapper))/snpEff.config"
        " -nodownload -noStats -csvStats {output.stats}"
        " -no-downstream -no-upstream -no-utr -no-intergenic" 
        " -v {params.genome} {input.vcfgz} 2>{log} | bgzip > {output.vcfgz}"
    


        
