# standard library imports
#
import os
import subprocess
import shutil

# third party imports
#
from snakemake.utils import report

# project specific imports
#
LIB_PATH = os.path.abspath(
    os.path.join(os.path.dirname(os.path.realpath(workflow.snakefile)), "..", "..", "lib"))
if LIB_PATH not in sys.path:
    sys.path.insert(0, LIB_PATH)
from pipelines import chroms_and_lens_from_fasta


RESULT_OUTDIR = 'out'


# non-login bash
shell.executable("/bin/bash")
shell.prefix("source rc/snakemake_env.rc;")

include: "../../rules/samtools.rules"
include: "../../rules/logging.rules"
include: "../../rules/report.rules"
include: "bwa_mem.rules"
include: "bwa_aln.rules"


localrules: final, report, dfilter_peak_to_fasta, macs2_peak_to_fasta



CONTROL_DIR = os.path.join(RESULT_OUTDIR, 'control')
MEMECHIP_OUTDIR_SUFFIX = "memechip"# relativ to input, no "-"!

# translate macs2 directory name (which indicates peak mode as macs2-{key}) to actual peak arg.
MACS2PEAK_TO_ARG = {
    'narrow': "",
    'broad': "--broad"
}

# translate dfilter directory name (which indicates peak mode as
# dfilter-{key}) to actual peak arg.
DFILTERPEAK_TO_ARG = {
    'TF': "-ks=10 -lpval=6 -nonzero -refine",
    'narrow': "-ks=60 -lpval=6",
    'broad': "-ks=20 -lpval=3 â€“nonzero",
}


# METHOD_PEAK_COMB entries define created output directories. separate
# method from peak arg by dash: {method}-{peak} and peak is translated
# using the maps above to corresponding peak arguments
#
METHOD_PEAK_COMB = []
if config['peak_type']  == "TF":
    if not config.get('skip_macs2'):
        METHOD_PEAK_COMB = ["macs2-narrow"]
    if not config.get('skip_dfilter'):
        METHOD_PEAK_COMB.append("dfilter-TF")

elif config['peak_type']  == "histone-narrow":
    if not config.get('skip_macs2'):
        METHOD_PEAK_COMB = ["macs2-narrow"]
    if not config.get('skip_dfilter'):
        METHOD_PEAK_COMB.append("dfilter-narrow")

elif config['peak_type']  == "histone-broad":
    if not config.get('skip_macs2'):
        METHOD_PEAK_COMB = ["macs2-narrow", "macs2-broad"]
    if not config.get('skip_dfilter'):
        METHOD_PEAK_COMB.append("dfilter-broad")

else:
    raise ValueError(config['peak_type'])


assert len(METHOD_PEAK_COMB), "FATAL: No peak calling method chosen"


rule final:
    input:
        report = "report.html",
        macs2_fa = expand(
            os.path.join(RESULT_OUTDIR, "{sample}/{methodpeak}/{sample}_extbp_summits.fa"),
            sample=[s for s in config['samples'] if s != 'control'],
            methodpeak=METHOD_PEAK_COMB),
        treatment_bw = expand(
            os.path.join(RESULT_OUTDIR, "{sample}/{methodpeak}/{sample}_treat_pileup.bw"),
            sample=[s for s in config['samples'] if s != 'control'],
            methodpeak=METHOD_PEAK_COMB),
        control_bw = expand(
            os.path.join(RESULT_OUTDIR, "{sample}/{methodpeak}/{sample}_control_lambda.bw"),
            sample=[s for s in config['samples'] if s != 'control'],
            methodpeak=METHOD_PEAK_COMB),
        memechip_html = expand(
            os.path.join(RESULT_OUTDIR, "{sample}/{methodpeak}/{sample}-{MEMECHIP_OUTDIR_SUFFIX}", "index.html"),
            sample=[s for s in config['samples'] if s != 'control'],
            methodpeak=METHOD_PEAK_COMB,
            MEMECHIP_OUTDIR_SUFFIX=MEMECHIP_OUTDIR_SUFFIX),
        tbam_stats = expand(
            os.path.join(RESULT_OUTDIR, '{sample}/{sample}.%s-nsrt.bamstats/stats.txt' % config['mapper']),
            sample=[s for s in config['samples'] if s != 'control'])

        
rule unit_merge_n:
    """
    Merge bam files (by name!) for multiple units into one for the given sample
    (or copy if just one).
    """
    input:
        # switch expand and wildcards and funny things happen
        lambda wc: expand('{prefix}/unit-{unit}.{mapper}-nsrt.bam',
                          prefix = wc.prefix,
                          unit = config['samples'][wc.sample],
                          mapper = wc.mapper)
    output:
        '{prefix}/{sample}/{sample}.{mapper}-nsrt.bam'
    log:
        '{prefix}/{sample}/{sample}.{mapper}-nrst.bam.log'
    message:
        "Merging files (sorted by name)"
    threads:
        4
    run:
        if len(input) > 1:
            shell("samtools merge -n -@ {threads} {output} {input} >& {log};")
        else:
            shell("ln {input} {output} >& {log};")

     
rule macs2:
    input:
        cbam = os.path.join(CONTROL_DIR, 'control.%s-nsrt.bam' % config['mapper']),
        tbam = os.path.join(RESULT_OUTDIR, '{sample}/{sample}.%s-nsrt.bam' % config['mapper']),
    output:
        # all suffices predefined by macs2
        tbdg = temp('{outdir}/macs2-{peak}/{sample}_treat_pileup.bdg'),
        cbdg = temp('{outdir}/macs2-{peak}/{sample}_control_lambda.bdg'),
        # sometime missing? model = '{outdir}/macs2-{peak}/{sample}_model.r',
        peak_xls = '{outdir}/macs2-{peak}/{sample}_peaks.xls',
        # peaks file not declared explicitely, because depends on mode
        # narrow:
        #  narrow_peak = '{outdir}/{sample}_peaks.narrowPeak',
        #  summits_bed = '{outdir}/{sample}_summits.bed'
        # broad:
        #  broad_peak = '{outdir}/{sample}_peaks.broadPeak',
        #  gapped_peak = '{outdir}/{sample}_peaks.gappedPeak',
        # created here even if run in broad mode
        #peak_file = lambda wc: '{outdir}/{sample}_peaks.{}Peak'.format(wc.outdir, wc.sample, wc.peak)
        summits_bed = '{outdir}/macs2-{peak}/{sample}_summits.bed'
    log:
        "{outdir}/macs2-{peak}/macs2.log"
    message:
        "Peak calling with macs2"
    params:
        basename = lambda wc: wc.sample,
        macs2_custom_args = config.get("macs2_custom_args", ""),
        read_type_arg = '-f BAMPE' if config['paired_end'] else '',
        peak_arg = lambda wc: MACS2PEAK_TO_ARG[wc.peak],
        gsize = config["references"]["genomesize"],
    threads:
        2
    shell:
        " macs2 callpeak --treatment {input.tbam} --control {input.cbam}"
        " --gsize {params.gsize}"
        " --bdg"# NAME+'_treat_pileup.bdg and NAME+'_control_lambda.bdg'
        " {params.read_type_arg}"
        " --keep-dup all"# we've marked dups already and want to avoid problems like https://github.com/taoliu/MACS/issues/78
        " {params.peak_arg}"
        " --outdir $(dirname {output.cbdg}) --name {params.basename}"
        " {params.macs2_custom_args} >& {log};"
        # peak file is used later to retrieve the sequences for motif
        # prediction.  summits bed is used for annotation.
        #
        # in
        # default/narrow mode the bed file describes the 1bp summit
        # which is $2+10 from narrowPeak. in --broad mode the bed file
        # is missing (and so is $10 from the broadPeak file). so we
        # create a bed-file, keeping the full peak range
        #
        #"test -e {output.summits_bed} || awk '{{d=$3-$2; mp=$2+int(d/2); printf \"%s\\t%d\\t%d\\t%s\\t%s\\n\", $1, mp, mp+1, $4, $9}}' $(ls $(dirname {output.cbdg})/*broadPeak) > {output.summits_bed};"
        "test -e {output.summits_bed} || awk '{{printf \"%s\\t%d\\t%d\\t%s\\n\", $1, $2, $3, $9}}' $(ls $(dirname {output.cbdg})/*broadPeak) > {output.summits_bed};"


rule bdg_to_bw:
    input:
        bdg = "{prefix}.bdg",
        genome_sizes = config['references']['genome'] + ".fai",
    output:
        bw = "{prefix}.bw",
    log:
        "{prefix}.bw.log"
    message:
        "Converting bedgraph to bigwig"
    shell:
        "{{ "
        # convert bedgraph to bigwig
        # getting 'bdg is not case-sensitive sorted at line 35.  Please use "sort -k1,1 -k2,2n" with LC_COLLATE=C,  or bedSort and try again.'
        "tmp={input.bdg}.srt;"
        # LC_COLLATE won't always work
        "LC_ALL=C sort -k1,1 -k2,2n {input.bdg} > $tmp;"
        "bedGraphToBigWig $tmp {input.genome_sizes} {output.bw};"
        "rm -f $tmp;"
        " }} >& {log}"

        
rule wig_to_bw:
    input:
        wig = "{prefix}.wig",
        genome_sizes = config['references']['genome'] + ".fai",
    output:
        bw = "{prefix}.bw",
    log:
        "{prefix}.bw.log"
    message:
        "Converting wig to bigwig"
    shell:
        "wigToBigWig {input.wig} {input.genome_sizes} {output.bw} >& {log}"
        

rule dfilter_peak_to_fasta:
    input:
        peaks = '{rootdir}/dfilter-{peak}/{prefix}.Peaks',
        genome = config['references']['genome'],
    output:
        seqbed = "{rootdir}/dfilter-{peak}/{prefix}_extbp_seq.bed",
        fa = "{rootdir}/dfilter-{peak}/{prefix}_extbp_summits.fa",        
    params:
        # peak extended += ext_bp_arg i.e. 2*ext_bp_arg in total
        # +- 250bp as in Ma et al. (2014), doi:10.1038/nprot.2014.083
        ext_bp_arg = "{}".format(config.get("ext_bp_arg", "250")),
        max_peaks = 1000,            
    log:
        "{rootdir}/dfilter-{peak}/{prefix}_extbp.log"
    message:
        "Converting dfilter peaks to fasta"
    shell:
        #  sort by -log10 pvalue and tag-count:
        "{{ "
        # pipefail needed for head: see https://lists.gnu.org/archive/html/bug-bash/2015-02/msg00052.html
        # and https://news.ycombinator.com/item?id=9255830
        " set +o pipefail; "
        " tail -n +2 {input.peaks} | sort -k6,6rn -k7,7nr | head -n {params.max_peaks} | "
        " awk -v ext={params.ext_bp_arg} '{{c=$1; s=$5-ext; e=$5+ext; printf \"%s\\t%d\\t%d\\n\", c, s<0 ? 0 : s, e;}}' > {output.seqbed};"
        "bedtools getfasta -fi {input.genome} -bed {output.seqbed} -fo {output.fa};"
        " }} >& {log}"


rule macs2_peak_to_fasta:
    input:
        summits_bed = '{rootdir}/macs2-{peak}/{prefix}_summits.bed',# crutch
        genome = config['references']['genome'],
    output:
        seqbed = "{rootdir}/macs2-{peak}/{prefix}_extbp_seq.bed",
        fa = "{rootdir}/macs2-{peak}/{prefix}_extbp_summits.fa",
    params:
        # peak extended += ext_bp_arg i.e. 2*ext_bp_arg in total
        # +- 250bp as in Ma et al. (2014), doi:10.1038/nprot.2014.083
        ext_bp_arg = "{}".format(config.get("ext_bp_arg", "250")),
        max_peaks = 1000,
    log:
        "{rootdir}/macs2-{peak}/{prefix}_extbp.log"
    message:
        "Converting MACS2 peaks to fasta"
    shell:
        # the following line fails with 141 (pipefail) in its original form. not sure why, but using fifo instead of pipe works.
        # "sort -k8,8rn -k7,7rn {input.summits_bed} | head -500 | coordinateSpan_Score.pl - {params.ext_bp_arg} > {output.seqbed};"
        #"coordinateSpan_Score.pl <(sort -k8,8rn -k7,7rn {input.summits_bed} | head -500) {params.ext_bp_arg} > {output.seqbed};"
        #
        # See also box4 in Ma (2014) doi:10.1038/nprot.2014.083
        #
        # sort by -log10 pvalue then foldchange (Willbanks & Facciotti, 2010, doi:10.1371/journal.pone.0011471).
        # keep only params.max_peaks
        # top hits. extension needs to be able to infer summit: for
        # narrow (10 cols) this is $2+10; for broad (9 cols) we take
        # the midpoint
        "{{ "
        # pipefail needed for head: see https://lists.gnu.org/archive/html/bug-bash/2015-02/msg00052.html
        # and https://news.ycombinator.com/item?id=9255830
        "set +o pipefail; "
        "peaks=$(ls $(echo {input.summits_bed} | sed -e 's,_summits.bed,,')_peaks.[nb]*Peak);"
        "sort -k8,8rn -k7,7rn $peaks | head -n {params.max_peaks} | "
        " awk -v ext={params.ext_bp_arg} '{{if (NF==9) {{d=$3-$2; mp=$2+int(d/2); c=$1; s=$2-ext; e=$2+ext;}} else if (NF==10) {{c=$1; s=$2+$10-ext; e=$2+$10+1+ext}} else {{exit 1}} printf \"%s\\t%d\\t%d\\t%s\\n\", c, s<0 ? 0 : s, e, $4;}}' > {output.seqbed};"
        "bedtools getfasta -fi {input.genome} -bed {output.seqbed} -fo {output.fa};"
        " }} >& {log}"


rule dfilter:
    input:
        cbam = os.path.join(CONTROL_DIR, 'control.%s-nsrt.bam' % config['mapper']),
        tbam = os.path.join(RESULT_OUTDIR, '{sample}/{sample}.%s-nsrt.bam' % config['mapper']),
    output:
        # dfilter has inconsistent output naming scheme. below is what's actually created.
        # we rename these. actual dfilter output:
        # - assuming: oprefix given as arg to -o
        # - annoyingly wig files are based on input file names, i.e. can't be defined in output
        # - $(dirname $oprefix)/$(basename $controlbam).wig
        # - $(dirname $oprefix)/$(basename $treatmentbam).wig
        # - $(dirname $oprefix)/$(basename $treatmentbam).filtered.wig
        # - {oprefix}.Peaks
        # - previous previous versions: {oprefix}.bed.PeakTracks
        # - previous $(dirname $oprefix)/track-$(basename $oprefix).bed
        # - current versions: {oprefix}.PeakTracks.bed
        peaks = '{outdir}/dfilter-{peak}/{sample}.Peaks',
        summits_bed = '{outdir}/dfilter-{peak}/{sample}_summits.bed',
        control_wig = '{outdir}/dfilter-{peak}/{sample}_control_lambda.wig',
        treatment_wig = '{outdir}/dfilter-{peak}/{sample}_treatment.wig',
        filtered_treatment_wig = '{outdir}/dfilter-{peak}/{sample}_filtered_treatment.wig',
        treatment_pileup_wig = '{outdir}/dfilter-{peak}/{sample}_treat_pileup.wig',# fake to match macs2 naming
    log:
        "{outdir}/dfilter-{peak}/dfilter.log"
    message:
        "Running Dfilter"
    params:
        peak_arg = lambda wc: DFILTERPEAK_TO_ARG[wc.peak],
        #read_type_arg = '-pe' if config['paired_end'] else '',
        read_type_arg = '', # vibhor 2016-11-28: no need (after seeing crashes)
        outprefix = lambda wc: os.path.join(wc.outdir, "dfilter-" + wc.peak, wc.sample)
    shell:
        '{{ '
        'od=$(dirname {params.outprefix}); test -d $od || mkdir $od;'
        'run_dfilter.sh -d={input.tbam} -c={input.cbam} -o={params.outprefix}'
        ' -wig -f=bam {params.peak_arg} {params.read_type_arg};'
        # might be cleaner to split the renaming below into separate rules.
        # different versions name the bed file differently, but there is only one, so rename lazily
        'bed=$(ls $od/*.bed 2>/dev/null || ls $od/*.bed.PeakTracks);'
        'mv $bed {output.summits_bed};'
        # control samples always called control so move this first (treatment samples might be called anything)
        'mv $od/control*wig {output.control_wig}_;'
        'mv $od/*filtered.wig {output.filtered_treatment_wig}_;'
        # only one with wig extension left: treatment
        'mv $od/*wig {output.treatment_wig};'
        'mv {output.control_wig}_ {output.control_wig};'
        'mv {output.filtered_treatment_wig}_ {output.filtered_treatment_wig};'
        'ln -s $(basename {output.filtered_treatment_wig}) {output.treatment_pileup_wig};'
        'touch -h {output.treatment_pileup_wig};'# see https://bitbucket.org/snakemake/snakemake/issues/397/unable-to-set-utime-on-symlink-your-python
         # deleted accidentally left over stuff
        'test -f comkernel && rm -f comkernel;'
        ' }} >& {log}'
    

rule memechip:
    input:
        seq = "{dirname}/{sample}_extbp_summits.fa"
    output:
        "{dirname}/{sample}-{MEMECHIP_OUTDIR_SUFFIX}/index.html"
    #params:
    log:
        "{dirname}/{sample}-{MEMECHIP_OUTDIR_SUFFIX}/meme-chip.log"
    message:
        "Running meme-chip"
    params:
        outdir = "{dirname}/{sample}-{MEMECHIP_OUTDIR_SUFFIX}"
    shell:
        # note: -oc instead of -o to help with reentrance
        # might be worthwhile playing with -time
        "meme-chip -oc {params.outdir} -dna {input.seq} >& {log}"
